package Omok;

import Practice.Character;

public class Board {
    int size;
    String[][] map;

    Board(int size) {
        this.size = size;
        map = new String[size][size];
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                map[row][col] = ".";
            }
        }
    }

    public void print() {
        for (int row = 0; row < size; row++) {
            if (row < 10) {
                System.out.print(" " + row + " ");
            } else
                System.out.print(row + " ");


            for (int col = 0; col < size; col++) {
                System.out.print(" " + map[row][col]);
            }
            System.out.println();
        }

        char colAlp = 'A';
        System.out.print("    ");
        for (int i = 0; i < size; i++) {
            char currentAlp = (char) (colAlp + i);
            System.out.print(currentAlp + " ");
        }
        System.out.println(" ");

    }

    public void game(String str, int row, String stone) {
        char strChar = str.charAt(0);
        int col = strChar - 'A';
        map[row][col] = stone;
    }

    public boolean finish() {

        int cntO = 0;
        int cntX = 0;

        //열(가로) 확인
        for (int j = 0; j < size; j++) {

            for (int i = 0; i < size; i++) {
                if (map[j][i].equals("O")) {
                    cntO++;
                    if (cntO >= 5) return true;
                }else cntO = 0;
                if (map[j][i].equals("X")) {
                    cntX++;
                    if (cntX >= 5) return true;
                }else cntX = 0;
            }
        }


        cntO = 0;
        cntX = 0;
        //행(세로) 확인
        for (int j = 0; j < size; j++) {
            for (int i = 0; i < size; i++) {
                if (map[i][j].equals("O")) {
                    cntO++;
                    if (cntO >= 5) return true;
                }else
                    cntO = 0;
                if (map[i][j].equals("X")) {
                    cntX++;
                    if (cntX >= 5) return true;
                } else cntX = 0;
            }
        }

        cntO = 0;
        cntX = 0;
        //대각선 우상향 확인
        for(int i = -4; i<= 4; i++){
            int r = 0 + i;
            int c = 0 + i;

            if(r >= 0 && r < size && c >= 0 && c < size){
                if(map[r][c].equals("O")){
                    cntO++;
                    if(cntO >= 5) return true;
                }else {
                    cntO = 0;
                }
                if(map[r][c].equals("X")){
                    cntX++;
                    if(cntX >= 5) return true;
                }else {
                    cntX = 0;
                }
            }
        }

        cntO = 0;
        cntX = 0;
        //대각선 우하향 확인
        for(int i = -4; i<= 4; i++){
            int r = 0 + i;
            int c = 0 - i;

            if(r >= 0 && r < size && c >= 0 && c < size){
                if(map[r][c].equals("O")){
                    cntO++;
                    if(cntO >= 5) return true;
                }else {
                    cntO = 0;
                }
                if(map[r][c].equals("X")){
                    cntX++;
                    if(cntX >= 5) return true;
                }else {
                    cntX = 0;
                }
            }
        }

        return false;
    }


}
